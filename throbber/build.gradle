apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'

ext {
	publishedGroupId = 'com.github.dyvoker'
	artifact = 'throbber'
	libraryVersion = '1.0'

	libraryName = 'Throbber'
	libraryDescription = 'Simple throbber for Android apps.'
	developerId = 'dyvoker'
	developerName = 'Ivan Tormozov'
	developerEmail = 'dyvoker@gmail.com'
	siteUrl = 'https://github.com/dyvoker/throbber'
	gitUrl = 'https://github.com/dyvoker/throbber.git'
	bintrayRepo = 'maven'
	bintrayName = 'throbber'

	licenseName = 'The Apache Software License, Version 2.0'
	licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
	allLicenses = ["Apache-2.0"]
}

group publishedGroupId
version libraryVersion

android {
	compileSdkVersion 28

	defaultConfig {
		minSdkVersion 14
		targetSdkVersion 28
		versionCode 1
		versionName libraryVersion
	}
	buildTypes {
		release {
			minifyEnabled false
		}
	}
}

dependencies {
	implementation 'androidx.appcompat:appcompat:1.1.0'
	api 'androidx.annotation:annotation:1.1.0'
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
	source = android.sourceSets.main.java.srcDirs
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

// Add all dependency to the javadoc.classpath (avoid "error: cannot find symbol").
afterEvaluate {
	javadoc.classpath += files(android.libraryVariants.collect { variant ->
		variant.javaCompile.classpath.files
	})
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.getDestinationDir()
}

artifacts {
	archives javadocJar
	archives sourcesJar
}

install {
	repositories.mavenInstaller {
		pom.project {
			packaging 'aar'
			groupId publishedGroupId
			artifactId artifact

			name libraryName
			description libraryDescription
			url siteUrl

			licenses {
				license {
					name licenseName
					url licenseUrl
				}
			}

			developers {
				developer {
					id developerId
					name developerName
					email developerEmail
				}
			}

			scm {
				connection gitUrl
				developerConnection gitUrl
				url siteUrl
			}
		}
	}
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
	user = properties.getProperty('bintray.user')
	key = properties.getProperty('bintray.apikey')
	configurations = ['archives']

	pkg {
		repo = bintrayRepo
		name = bintrayName
		desc = libraryDescription
		websiteUrl = siteUrl
		vcsUrl = gitUrl
		licenses = allLicenses
		publish = true
		publicDownloadNumbers = true

		version {
			desc = libraryDescription
			vcsTag = 'v' + libraryVersion
		}
	}
}

// gradlew :throbber:clean :throbber:install :throbber:bintrayUpload
